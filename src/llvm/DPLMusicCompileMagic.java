/* Generated By:JJTree&JavaCC: Do not edit this line. DPLMusicCompileMagic.java */
package llvm;
import audioSynthesis.OpenFile;
import java.util.Scanner;
import java.io.Reader;
import java.io.StringReader;

public class DPLMusicCompileMagic/*@bgen(jjtree)*/implements DPLMusicCompileMagicTreeConstants, DPLMusicCompileMagicConstants {/*@bgen(jjtree)*/
  protected JJTDPLMusicCompileMagicState jjtree = new JJTDPLMusicCompileMagicState();public static void main(String args []) throws ParseException
  {
    System.out.println("Reading from standard input 0 or 1(exit)...\u005cn");
    Scanner userinput = new Scanner(System.in);
        int choice = userinput.nextInt();
    if (true)
    {
        switch (choice)
        {
          case 0 :
                System.out.println("Reading File....");
                Reader reader = new StringReader(OpenFile.readFile("/home/parallels/Eclipse IDE Java/Workspace/Music Language Translation/Media/songs/My God is awesome.txt"));
                try
                {
                        DPLMusicCompileMagic parse = new DPLMusicCompileMagic(reader);

                        SimpleCharStream stream = new SimpleCharStream(reader);
                        Token temp_token = null;
                        DPLMusicCompileMagicTokenManager TkMgr = new DPLMusicCompileMagicTokenManager(stream);
                        int count = 0;
                do {
                        temp_token = TkMgr.getNextToken();
                                switch(temp_token.kind) {
                                                case VERSE:             count++;
                                                                                System.out.println("\u005cnVERSE "+count+" :    " + temp_token.image);
                                        break;
                                        case CHORUS:    System.out.println("\u005cnCHORUS :    " + temp_token.image);
                                        break;
                                        case BRIDGE:    System.out.println("\u005cnBRIDGE :    " + temp_token.image);
                                        break;
                                        default:
                                                if ( temp_token.kind != EOF )
                                                 System.out.println("\u005cnOTHER: " + temp_token.image);
                                        break;
                        }
                } while (temp_token.kind != EOF);

                }finally{
                  //System.out.println("Reached the end of the file.");
                }
                }
        }
}

  final public void SongConstructs() throws ParseException {
 /*@bgen(jjtree) Song_Constructs */
  SimpleNode jjtn000 = new SimpleNode(JJTSONG_CONSTRUCTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAB:
        label_1:
        while (true) {
          Verse();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TAB:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
        }
        break;
      case OPEN_PAR:
        label_2:
        while (true) {
          Chorus();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPEN_PAR:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case DOUBLE_QOUTE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOUBLE_QOUTE:
            label_3:
            while (true) {
              Bridge();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DOUBLE_QOUTE:
                ;
                break;
              default:
                jj_la1[2] = jj_gen;
                break label_3;
              }
            }
            break;
          case 0:
            jj_consume_token(0);
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Verse() throws ParseException {
 /*@bgen(jjtree) VERSE */
  SimpleNode jjtn000 = new SimpleNode(JJTVERSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TAB);
      label_4:
      while (true) {
        jj_consume_token(SENTENCE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SENTENCE:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEWLINE:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        jj_consume_token(NEWLINE);
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Chorus() throws ParseException {
 /*@bgen(jjtree) CHORUS */
  SimpleNode jjtn000 = new SimpleNode(JJTCHORUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_PAR);
      label_6:
      while (true) {
        jj_consume_token(SENTENCE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SENTENCE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEWLINE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
        jj_consume_token(NEWLINE);
      }
      jj_consume_token(CLOSE_PAR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Bridge() throws ParseException {
 /*@bgen(jjtree) BRIDGE */
  SimpleNode jjtn000 = new SimpleNode(JJTBRIDGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOUBLE_QOUTE);
      label_8:
      while (true) {
        jj_consume_token(SENTENCE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SENTENCE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEWLINE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_9;
        }
        jj_consume_token(NEWLINE);
      }
      jj_consume_token(DOUBLE_QOUTE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  /** Generated Token Manager. */
  public DPLMusicCompileMagicTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x8,0x80,0x81,0x81,0x28,0x8000,0x2000,0x8000,0x2000,0x8000,0x2000,};
   }

  /** Constructor with InputStream. */
  public DPLMusicCompileMagic(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DPLMusicCompileMagic(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DPLMusicCompileMagicTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DPLMusicCompileMagic(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DPLMusicCompileMagicTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DPLMusicCompileMagic(DPLMusicCompileMagicTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DPLMusicCompileMagicTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

 /**end of main**/
}
